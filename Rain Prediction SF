import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
import matplotlib.pyplot as plt
# import datetime
from datetime import datetime


df = pd.read_csv('SF Rain data.csv')
df.head()

df['newDate'] = df['DATE'].apply(lambda x: datetime.strptime(x[:10], "%Y-%m-%d").strftime("%m/%d/%Y"))

df.head()

%matplotlib inline
df.plot.scatter(x='DATE',y='PRCP')

df.plot.scatter(x='AWND',y='PRCP')

df.plot.scatter(x='DATE',y='AWND')

df.plot.scatter(x='TAVG',y='PRCP')

df.plot.scatter(x='WDF2',y='PRCP')

df.plot.scatter(x='WSF5',y='PRCP')

len(df.index)

#create binary precipitation variable
df.loc[df['PRCP'] <= 0, 'RAIN'] = 0
df.loc[df['PRCP'] > 0, 'RAIN'] = 1

df.head()

df['month'] = pd.to_datetime(df['newDate']).dt.month

df.head()

seasons = [1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 1]
month_to_season = dict(zip(range(1,13), seasons))
df['season']=df['month'].map(month_to_season)

    


df.head()

#creating a vector of dataframes.
#In the line below, you should change the X matrix in order to set up multiple models to determine which is the most parsimonious.
X = df[['AWND', 'TMAX', 'TMIN','WSF2','WDF2']]
y = df['RAIN']

#False shows that none of these fields have any null values, just want we want
X.isnull().any()

#create testing and training sets using scaled vars
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#instantiate the model
log_regression = LogisticRegression()

#fit the model using the training data
log_regression.fit(X_train,y_train)

#use model to make predictions on test data
y_pred = log_regression.predict(X_test)

def regression_results(y_true, y_pred):

# Regression metrics 
    explained_variance=metrics.explained_variance_score(y_true, y_pred)
    mean_absolute_error=metrics.mean_absolute_error(y_true, y_pred) 
    mse=metrics.mean_squared_error(y_true, y_pred) 
    mean_squared_log_error=metrics.mean_squared_log_error(y_true, y_pred)
    median_absolute_error=metrics.median_absolute_error(y_true, y_pred)
    r2=metrics.r2_score(y_true, y_pred)

    print('explained_variance: ', round(explained_variance,4))    
    print('mean_squared_log_error: ', round(mean_squared_log_error,4))
    print('r2: ', round(r2,4))
    print('MAE: ', round(mean_absolute_error,4))
    print('MSE: ', round(mse,4))
    print('RMSE: ', round(np.sqrt(mse),4))

regression_results(y_test, y_pred)

#confusion Matrix ([[True +ve, True -ve],[False +ve, False -ve]])
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
cnf_matrix


print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

#define metrics
y_pred_proba = log_regression.predict_proba(X_test)[::,1]
fpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)
auc = metrics.roc_auc_score(y_test, y_pred_proba)

#create ROC curve(Radar's receiver operator curve - submarine not whale) 
plt.plot(fpr,tpr,label="AUC="+str(auc))
plt.legend(loc=4)
plt.show()

#output Summary

